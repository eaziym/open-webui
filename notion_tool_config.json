[
  {
    "id": "notion_tool_1740851113",
    "name": "Notion Tools",
    "content": "\"\"\"\ntitle: Notion Tools\nauthor: Open WebUI\nauthor_url: https://github.com/open-webui\ngit_url: https://github.com/open-webui/notion-tools\ndescription: A set of tools for interacting with Notion databases and pages\nrequired_open_webui_version: 0.4.0\nrequirements: notion-client\nversion: 0.1.0\nlicence: MIT\n\"\"\"\n\nimport os\nimport json\nfrom notion_client import Client\nfrom typing import Dict, List, Optional, Any, Union\n\nclass Tools:\n    def __init__(self):\n        \"\"\"Initialize the Notion Tools.\"\"\"\n        self.notion = None\n        # No valve properties needed\n    \n    def _get_client(self) -> Union[Client, None]:\n        \"\"\"\n        Get or create the Notion client instance.\n        \n        Returns:\n            A Notion client instance or None if no access token is available.\n        \"\"\"\n        if not self.notion:\n            # Only use environment variable for token\n            token = os.environ.get(\"NOTION_ACCESS_TOKEN\")\n            \n            if not token:\n                return None\n                \n            self.notion = Client(auth=token)\n        return self.notion\n    \n    def notion_list_databases(self) -> str:\n        \"\"\"\n        List all Notion databases the user has access to.\n        \n        Returns:\n            A formatted list of Notion databases with their IDs and titles.\n        \"\"\"\n        client = self._get_client()\n        if not client:\n            return \"Error: Notion access token not found. Please set the NOTION_ACCESS_TOKEN environment variable.\"\n        \n        try:\n            results = client.search(filter={\"property\": \"object\", \"value\": \"database\"}).get(\"results\", [])\n            \n            if not results:\n                return \"No databases found. Make sure your access token has appropriate permissions.\"\n                \n            output = \"### Available Notion Databases:\\n\\n\"\n            for db in results:\n                db_id = db.get(\"id\", \"Unknown ID\")\n                title = db.get(\"title\", [])\n                db_title = \"Untitled\"\n                \n                # Extract title from the title array if available\n                if title and len(title) > 0:\n                    title_parts = [t.get(\"plain_text\", \"\") for t in title if \"plain_text\" in t]\n                    if title_parts:\n                        db_title = \" \".join(title_parts)\n                \n                output += f\"- **{db_title}** (ID: `{db_id}`)\\n\"\n                \n            return output\n        except Exception as e:\n            return f\"Error listing databases: {str(e)}\"\n    \n    def notion_query_database(self, database_id: str, filter_json: str = \"\") -> str:\n        \"\"\"\n        Query a Notion database and return the results.\n        \n        Args:\n            database_id: The ID of the Notion database to query\n            filter_json: Optional JSON string containing filter criteria (Notion filter object)\n            \n        Returns:\n            Formatted results from the database query\n        \"\"\"\n        client = self._get_client()\n        if not client:\n            return \"Error: Notion access token not found. Please set the NOTION_ACCESS_TOKEN environment variable.\"\n        \n        try:\n            # Parse filter JSON if provided\n            filter_obj = None\n            if filter_json:\n                try:\n                    filter_obj = json.loads(filter_json)\n                except json.JSONDecodeError:\n                    return f\"Error: Invalid filter JSON: {filter_json}\"\n            \n            # Query the database\n            query_params = {\"database_id\": database_id}\n            if filter_obj:\n                query_params[\"filter\"] = filter_obj\n                \n            response = client.databases.query(**query_params)\n            results = response.get(\"results\", [])\n            \n            if not results:\n                return \"No results found for this query.\"\n            \n            # Format the results\n            output = f\"### Query Results for Database `{database_id}`\\n\\n\"\n            \n            for page in results:\n                page_id = page.get(\"id\", \"Unknown\")\n                properties = page.get(\"properties\", {})\n                \n                output += f\"#### Page: `{page_id}`\\n\"\n                \n                for prop_name, prop_data in properties.items():\n                    prop_type = prop_data.get(\"type\", \"unknown\")\n                    \n                    # Extract property values based on their type\n                    if prop_type == \"title\":\n                        value_list = prop_data.get(\"title\", [])\n                        value = \" \".join([item.get(\"plain_text\", \"\") for item in value_list])\n                    elif prop_type == \"rich_text\":\n                        value_list = prop_data.get(\"rich_text\", [])\n                        value = \" \".join([item.get(\"plain_text\", \"\") for item in value_list])\n                    elif prop_type == \"number\":\n                        value = prop_data.get(\"number\", \"\")\n                    elif prop_type == \"select\":\n                        select_data = prop_data.get(\"select\", {})\n                        value = select_data.get(\"name\", \"\") if select_data else \"\"\n                    elif prop_type == \"multi_select\":\n                        multi_select = prop_data.get(\"multi_select\", [])\n                        value = \", \".join([item.get(\"name\", \"\") for item in multi_select])\n                    elif prop_type == \"date\":\n                        date_data = prop_data.get(\"date\", {})\n                        if date_data:\n                            start = date_data.get(\"start\", \"\")\n                            end = date_data.get(\"end\", \"\")\n                            value = f\"{start} - {end}\" if end else start\n                        else:\n                            value = \"\"\n                    elif prop_type == \"checkbox\":\n                        value = \"\u2705\" if prop_data.get(\"checkbox\", False) else \"\u274c\"\n                    else:\n                        value = f\"[{prop_type} value]\"\n                    \n                    output += f\"- **{prop_name}**: {value}\\n\"\n                \n                output += \"\\n\"\n            \n            return output\n        except Exception as e:\n            return f\"Error querying database: {str(e)}\"\n    \n    def notion_create_page(self, database_id: str, title: str, properties_json: str = \"\", content_json: str = \"\") -> str:\n        \"\"\"\n        Create a new page in a Notion database.\n        \n        Args:\n            database_id: The ID of the database to create a page in\n            title: The title of the new page\n            properties_json: Optional JSON string containing additional properties\n            content_json: Optional JSON string containing page content blocks\n            \n        Returns:\n            A success message with the new page ID or an error message\n        \"\"\"\n        client = self._get_client()\n        if not client:\n            return \"Error: Notion access token not found. Please set the NOTION_ACCESS_TOKEN environment variable.\"\n        \n        try:\n            # Prepare the properties\n            properties = {\n                \"title\": {\n                    \"title\": [\n                        {\n                            \"text\": {\n                                \"content\": title\n                            }\n                        }\n                    ]\n                }\n            }\n            \n            # Add additional properties if provided\n            if properties_json:\n                try:\n                    additional_props = json.loads(properties_json)\n                    if isinstance(additional_props, dict):\n                        properties.update(additional_props)\n                    else:\n                        return \"Error: properties_json must be a valid JSON object\"\n                except json.JSONDecodeError:\n                    return f\"Error: Invalid properties JSON: {properties_json}\"\n            \n            # Create the page\n            page_data = {\n                \"parent\": {\"database_id\": database_id},\n                \"properties\": properties\n            }\n            \n            # Add content if provided\n            if content_json:\n                try:\n                    content = json.loads(content_json)\n                    if isinstance(content, list):\n                        page_data[\"children\"] = content\n                    else:\n                        return \"Error: content_json must be a valid JSON array of block objects\"\n                except json.JSONDecodeError:\n                    return f\"Error: Invalid content JSON: {content_json}\"\n            \n            response = client.pages.create(**page_data)\n            page_id = response.get(\"id\", \"Unknown\")\n            \n            return f\"Successfully created page in database. Page ID: `{page_id}`\"\n        except Exception as e:\n            return f\"Error creating page: {str(e)}\"\n    \n    def notion_search(self, query: str, search_type: str = \"\") -> str:\n        \"\"\"\n        Search Notion for pages, databases, or other content.\n        \n        Args:\n            query: The search query string\n            search_type: Optional type filter ('page', 'database', or leave empty for all)\n            \n        Returns:\n            Formatted search results\n        \"\"\"\n        client = self._get_client()\n        if not client:\n            return \"Error: Notion access token not found. Please set the NOTION_ACCESS_TOKEN environment variable.\"\n        \n        try:\n            # Prepare search parameters\n            search_params = {\"query\": query}\n            \n            # Add filter if specified\n            if search_type:\n                if search_type in [\"page\", \"database\"]:\n                    search_params[\"filter\"] = {\"property\": \"object\", \"value\": search_type}\n                else:\n                    return f\"Error: Invalid search_type '{search_type}'. Use 'page', 'database', or leave empty.\"\n            \n            # Execute the search\n            response = client.search(**search_params)\n            results = response.get(\"results\", [])\n            \n            if not results:\n                return f\"No results found for query: '{query}'\"\n            \n            # Format the results\n            output = f\"### Notion Search Results for '{query}'\\n\\n\"\n            \n            for item in results:\n                item_id = item.get(\"id\", \"Unknown\")\n                item_type = item.get(\"object\", \"Unknown\")\n                \n                if item_type == \"page\":\n                    # Get the title from properties for pages\n                    properties = item.get(\"properties\", {})\n                    title_prop = properties.get(\"title\", {})\n                    title_items = title_prop.get(\"title\", []) if title_prop else []\n                    title = \" \".join([t.get(\"plain_text\", \"\") for t in title_items]) or \"Untitled Page\"\n                    \n                    parent = item.get(\"parent\", {})\n                    parent_type = parent.get(\"type\", \"Unknown\")\n                    parent_id = parent.get(f\"{parent_type}_id\", \"Unknown\") if parent_type in [\"database\", \"page\", \"workspace\"] else \"Unknown\"\n                    \n                    output += f\"#### \ud83d\udcc4 Page: {title}\\n\"\n                    output += f\"- **ID**: `{item_id}`\\n\"\n                    output += f\"- **Parent Type**: {parent_type}\\n\"\n                    output += f\"- **Parent ID**: `{parent_id}`\\n\\n\"\n                \n                elif item_type == \"database\":\n                    # Get the title from title field for databases\n                    title_items = item.get(\"title\", [])\n                    title = \" \".join([t.get(\"plain_text\", \"\") for t in title_items]) or \"Untitled Database\"\n                    \n                    output += f\"#### \ud83d\udcca Database: {title}\\n\"\n                    output += f\"- **ID**: `{item_id}`\\n\\n\"\n                \n                else:\n                    output += f\"#### {item_type.capitalize()}: {item_id}\\n\\n\"\n            \n            return output\n        except Exception as e:\n            return f\"Error searching Notion: {str(e)}\"\n",
    "meta": {
      "name": "Notion Tools",
      "author": "Open WebUI",
      "description": "A set of tools for interacting with Notion databases and pages",
      "avatar": "",
      "cover": "",
      "tags": [
        "notion",
        "database",
        "productivity"
      ],
      "version": "0.1.0"
    },
    "specs": [
      {
        "id": "notion_tool_1740851113_list_databases",
        "name": "notion_list_databases",
        "parameters": {},
        "description": "List all Notion databases the user has access to."
      },
      {
        "id": "notion_tool_1740851113_query_database",
        "name": "notion_query_database",
        "parameters": {
          "database_id": {
            "type": "string",
            "description": "The ID of the Notion database to query"
          },
          "filter_json": {
            "type": "string",
            "description": "Optional JSON string containing filter criteria (Notion filter object)"
          }
        },
        "description": "Query a Notion database and return the results."
      },
      {
        "id": "notion_tool_1740851113_create_page",
        "name": "notion_create_page",
        "parameters": {
          "database_id": {
            "type": "string",
            "description": "The ID of the database to create a page in"
          },
          "title": {
            "type": "string",
            "description": "The title of the new page"
          },
          "properties_json": {
            "type": "string",
            "description": "Optional JSON string containing additional properties"
          },
          "content_json": {
            "type": "string",
            "description": "Optional JSON string containing page content blocks"
          }
        },
        "description": "Create a new page in a Notion database."
      },
      {
        "id": "notion_tool_1740851113_search",
        "name": "notion_search",
        "parameters": {
          "query": {
            "type": "string",
            "description": "The search query string"
          },
          "search_type": {
            "type": "string",
            "description": "Optional type filter ('page', 'database', or leave empty for all)"
          }
        },
        "description": "Search Notion for pages, databases, or other content."
      }
    ],
    "access_control": {
      "enabled": true,
      "roles": [],
      "groups": []
    },
    "created_at": 1740851113,
    "updated_at": 1740851113,
    "type": "function"
  }
]